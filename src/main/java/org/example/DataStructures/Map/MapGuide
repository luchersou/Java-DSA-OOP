Java Map Interface: A Comprehensive Guide

#1. Map Interface Overview

-The Map interface in Java represents an object that maps keys to values with:
-Unique keys (no duplicates)
-Each key maps to exactly one value
-Support for null keys/values (implementation-dependent)

Key - Characteristics
Feature - Description
Uniqueness - Keys must be unique
Order - Generally unordered (except LinkedHashMap, TreeMap)
Null Support - Varies by implementation
Big-O (Average Case) - Depends on implementation



#2. Map Implementations Comparison

HashMap
Underlying Structure: Hash table
Best For: General-purpose key-value storage

Performance:
put()/get()/remove(): O(1)
Worst case: O(n) (poor hashing)
Order: No ordering guarantee
Thread Safety: Not thread-safe
Nulls: Allows one null key and multiple null values
Resizing: Doubles capacity when threshold reached


-LinkedHashMap
Underlying Structure: Hash table + doubly-linked list
Best For: Preserving insertion/access order

Performance:
put()/get()/remove(): O(1)
Order: Maintains insertion or access order
Thread Safety: Not thread-safe
Nulls: Allows one null key and multiple null values
Extra: Can implement LRU cache

-Hashtable
Underlying Structure: Hash table (legacy)
Best For: Legacy thread-safe requirements

Performance:
Similar to HashMap but with synchronization overhead
Order: No ordering
Thread Safety: Thread-safe (synchronized methods)
Nulls: Does not allow null keys or values
Resizing: (capacity*2) + 1 when full


-TreeMap
Underlying Structure: Red-black tree
Best For: Sorted key-value pairs

Performance:
put()/get()/remove(): O(log n)
Order: Keys sorted in natural order or by Comparator
Thread Safety: Not thread-safe
Nulls: Only allows null if comparator permits
Extra: Provides subMap(), headMap(), tailMap()



#3. Performance Summary
Operation	HashMap	LinkedHashMap	Hashtable	TreeMap
put()	O(1)	O(1)	O(1)	O(log n)
get()	O(1)	O(1)	O(1)	O(log n)
remove()	O(1)	O(1)	O(1)	O(log n)
containsKey()	O(1)	O(1)	O(1)	O(log n)
Iteration	O(n)	O(n)	O(n)	O(n)



#4. When to Use Each?
HashMap: Default choice for most use cases
LinkedHashMap: When insertion/access order matters
Hashtable: Only for legacy thread-safe code (prefer ConcurrentHashMap)
TreeMap: When sorted key iteration is required



#5. Key Takeaways
-HashMap offers best average-case performance
-LinkedHashMap adds predictable iteration order
-TreeMap provides sorting at logarithmic cost
-Hashtable is legacy and largely obsolete
-All enforce key uniqueness but vary in ordering and null support

Best Practices:
-Prefer HashMap unless you need ordering
-Use LinkedHashMap for LRU caches or predictable iteration
-Choose TreeMap for sorted key requirements
-For concurrency, use ConcurrentHashMap instead of Hashtable



#6. Here are the essential ways to access, modify, and iterate over a Map<String, Integer>:

A. GET (Retrieve Values)
Map<String, Integer> ages = new HashMap<>();
ages.put("Alice", 25);
ages.put("Bob", 30);

// Basic get()
Integer aliceAge = ages.get("Alice"); // 25

// Get with default value (Java 8+)
Integer charlieAge = ages.getOrDefault("Charlie", 0); // 0 (key doesn't exist)

B. SET (Add/Update Values)
// Add or update
ages.put("Alice", 26); // Updates Alice to 26
ages.put("Charlie", 35); // Adds new entry

// Conditional update (Java 8+)
ages.putIfAbsent("Bob", 40); // Won't change since Bob exists

C. FOR (Iteration Methods)
Option 1: Entry iteration (recommended)
for (Map.Entry<String, Integer> entry : ages.entrySet()) {
   System.out.println(entry.getKey() + ": " + entry.getValue());
}
// Alice: 26
// Bob: 30
// Charlie: 35

Option 2: Key iteration
for (String name : ages.keySet()) {
   System.out.println(name + ": " + ages.get(name));
}
Option 3: Value iteration
for (Integer age : ages.values()) {
   System.out.println("Age: " + age);
}
Option 4: forEach + lambda (Java 8+)
ages.forEach((name, age) ->
   System.out.println(name + " is " + age + " years old")
);

D. Performance Considerations
Operation	Big-O	Note
get()	O(1)	Very fast in HashMap
put()	O(1)	Fast insertion/update
Iteration	O(n)	Processes all elements

When to Use Each Method
-get(): When you need to retrieve a specific value
-getOrDefault(): When keys might be missing
-entrySet(): Best for iteration (avoids multiple get() calls)
-forEach: Cleaner code in Java 8+
-Pro Tip: Prefer entrySet() for iteration instead of keySet() + get() as it's more efficient (avoids multiple map lookups).